/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.Coordinador;
import VO.AlumnoVO;
import VO.PagoVO;
import VO.RegistroPagoVO;
import VO.VariablesVO;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;

/**
 *
 * @author Lenovo
 */
public class frmPago extends javax.swing.JFrame {

    private Coordinador coordinador;
    private final ImageIcon ICON_NO_PHOTO = new javax.swing.ImageIcon(getClass().getResource("/Recursos/no_photo2.png"));
    private int contadorCuotasPagadas = 0, contadorCuotasPendientes = 0;
    private String codigo;
    private double totalPagado;
    private double total_a_pagar;
    private int id_pago;
    private double saldo_favorBD;
    private PagoVO pvo = new PagoVO();

    /**
     * Creates new form frmPago
     */
    public frmPago() {
        initComponents();
    }

    public void ajustar(JLabel label, ImageIcon icon) {
        //esta funcion ajusta un icono(parametro) al tama√±o del label (parametro)
        Icon icono = new ImageIcon(icon.getImage().getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_DEFAULT));
        label.setIcon(icono);
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        frmBusqueda = new javax.swing.JFrame();
        jPanel12 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        txtBusqueda = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBusqueda = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        btnBorrar1 = new javax.swing.JButton();
        btnSalir1 = new javax.swing.JButton();
        btnSeleccion = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtConsultar = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblUsuarioActvo = new javax.swing.JLabel();
        btnConsultar1 = new javax.swing.JButton();
        btnAtras1 = new javax.swing.JButton();
        btnGuardar1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtPnombre = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        lblfoto = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblCuota = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblMora = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblIva = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblDiaCobro = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        lblMatricula = new javax.swing.JLabel();
        lblCuotasAPagar = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblCuotasConMora = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        txtFechaComprobante = new datechooser.beans.DateChooserCombo();
        jLabel10 = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cbxPago = new javax.swing.JComboBox<>();
        txtNombre = new javax.swing.JTextField();
        lblRegistro = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtReferencia = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cbxBanco = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        txtTransaccion = new javax.swing.JTextField();
        txtFechaEjecucion = new datechooser.beans.DateChooserCombo();
        jLabel22 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        rbnCuotas = new javax.swing.JRadioButton();
        jLabel27 = new javax.swing.JLabel();
        rbnInscripcion = new javax.swing.JRadioButton();
        rbnSeguro = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        lblUsuarioActvo1 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        lblCuotasAPendientes = new javax.swing.JLabel();
        lblSaldoFavor = new javax.swing.JLabel();
        lblTotalCancelado = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtConcepto = new javax.swing.JTextArea();
        jLabel25 = new javax.swing.JLabel();
        lblPorPagar = new javax.swing.JLabel();

        frmBusqueda.setUndecorated(true);
        frmBusqueda.setSize(new java.awt.Dimension(470, 320));
        frmBusqueda.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel12.setBackground(new java.awt.Color(69, 90, 100));
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel52.setBackground(new java.awt.Color(2, 119, 189));
        jLabel52.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(255, 255, 255));
        jLabel52.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel52.setText("Busqueda");
        jLabel52.setOpaque(true);
        jPanel12.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 450, 37));

        jPanel13.setBackground(new java.awt.Color(2, 119, 189));
        jPanel13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));
        jPanel13.setFont(new java.awt.Font("Verdana", 3, 12)); // NOI18N
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel58.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(255, 255, 255));
        jLabel58.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel58.setText("Cedula Representante o Nombre Alumno");
        jPanel13.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 270, 30));

        txtBusqueda.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBusquedaActionPerformed(evt);
            }
        });
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyTyped(evt);
            }
        });
        jPanel13.add(txtBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 150, 30));

        tblBusqueda.setBackground(new java.awt.Color(153, 204, 255));
        tblBusqueda.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre y Apellido"
            }
        ));
        tblBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBusquedaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tblBusquedaMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(tblBusqueda);

        jPanel13.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 430, 150));

        btnBorrar1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnBorrar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/cleaner(1).png"))); // NOI18N
        btnBorrar1.setText("Borrar");
        btnBorrar1.setPreferredSize(new java.awt.Dimension(60, 23));
        btnBorrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrar1ActionPerformed(evt);
            }
        });
        jPanel13.add(btnBorrar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 210, 130, 30));

        btnSalir1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnSalir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icon_exit24.png"))); // NOI18N
        btnSalir1.setText("Salir");
        btnSalir1.setPreferredSize(new java.awt.Dimension(60, 23));
        btnSalir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalir1ActionPerformed(evt);
            }
        });
        jPanel13.add(btnSalir1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, 130, 30));

        btnSeleccion.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icon_next24.png"))); // NOI18N
        btnSeleccion.setText("Seleccionar");
        btnSeleccion.setPreferredSize(new java.awt.Dimension(60, 23));
        btnSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionActionPerformed(evt);
            }
        });
        jPanel13.add(btnSeleccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 130, 30));

        jPanel12.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 450, 250));

        frmBusqueda.getContentPane().add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 320));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(69, 90, 100));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConsultarActionPerformed(evt);
            }
        });
        txtConsultar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtConsultarKeyTyped(evt);
            }
        });
        jPanel2.add(txtConsultar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 130, 30));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Codigo Cedula");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, 30));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Registro de Pagos");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 830, -1));

        lblUsuarioActvo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblUsuarioActvo.setForeground(new java.awt.Color(255, 255, 255));
        lblUsuarioActvo.setText("usuario activo");
        lblUsuarioActvo.setName("lblUsuarioActivo"); // NOI18N
        jPanel2.add(lblUsuarioActvo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 450, 110, 30));

        btnConsultar1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnConsultar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icon_buscar24.png"))); // NOI18N
        btnConsultar1.setText("consultar");
        btnConsultar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });
        jPanel2.add(btnConsultar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, 120, 30));

        btnAtras1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnAtras1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icon_back24.png"))); // NOI18N
        btnAtras1.setText("Atras");
        btnAtras1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtras1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnAtras1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 450, 100, 30));

        btnGuardar1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnGuardar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icon_guardar24.png"))); // NOI18N
        btnGuardar1.setText("Guardar");
        btnGuardar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardar1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnGuardar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 450, 110, 30));

        jPanel3.setBackground(new java.awt.Color(2, 119, 189));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Alumno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtPnombre.setEditable(false);
        txtPnombre.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        txtPnombre.setForeground(new java.awt.Color(255, 255, 255));
        txtPnombre.setToolTipText("");
        txtPnombre.setBorder(null);
        txtPnombre.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtPnombre.setOpaque(false);
        txtPnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPnombreActionPerformed(evt);
            }
        });
        txtPnombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPnombreKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPnombreKeyTyped(evt);
            }
        });
        jPanel3.add(txtPnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 250, 40));

        jLabel28.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Codigo");
        jPanel3.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 17, 80, 30));

        txtCodigo.setEditable(false);
        txtCodigo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtCodigo.setForeground(new java.awt.Color(255, 255, 255));
        txtCodigo.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtCodigo.setToolTipText("");
        txtCodigo.setBorder(null);
        txtCodigo.setOpaque(false);
        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });
        jPanel3.add(txtCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 170, 30));

        lblfoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblfoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        jPanel3.add(lblfoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 90, 100));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 400, 130));

        jPanel5.setBackground(new java.awt.Color(2, 119, 189));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informacion", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Precio Cuota");
        jPanel5.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 90, 20));

        lblCuota.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCuota.setForeground(new java.awt.Color(255, 255, 255));
        lblCuota.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCuota.setText("0");
        lblCuota.setToolTipText("");
        lblCuota.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel5.add(lblCuota, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 60, 20));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Mora ( % )");
        jPanel5.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 60, 20));

        lblMora.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblMora.setForeground(new java.awt.Color(255, 255, 255));
        lblMora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMora.setText("0");
        lblMora.setToolTipText("");
        lblMora.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel5.add(lblMora, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 60, 20));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Iva ( % )");
        jPanel5.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 50, 20));

        lblIva.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblIva.setForeground(new java.awt.Color(255, 255, 255));
        lblIva.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIva.setText("0");
        lblIva.setToolTipText("");
        lblIva.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel5.add(lblIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 50, 20));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Cada mes");
        jPanel5.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, -1, 20));

        lblDiaCobro.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDiaCobro.setForeground(new java.awt.Color(255, 255, 255));
        lblDiaCobro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDiaCobro.setText("0");
        lblDiaCobro.setToolTipText("");
        lblDiaCobro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel5.add(lblDiaCobro, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 40, 20));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Dia de Cobro");
        jPanel5.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 80, 20));

        jLabel30.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Precio Matricula");
        jPanel5.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, 100, 20));

        lblMatricula.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblMatricula.setForeground(new java.awt.Color(255, 255, 255));
        lblMatricula.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMatricula.setText("0");
        lblMatricula.setToolTipText("");
        lblMatricula.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel5.add(lblMatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 100, 20));

        jPanel2.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, 420, 80));

        lblCuotasAPagar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCuotasAPagar.setForeground(new java.awt.Color(255, 255, 255));
        lblCuotasAPagar.setText("0");
        lblCuotasAPagar.setToolTipText("");
        lblCuotasAPagar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblCuotasAPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 230, 70, 20));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Cuotas con mora");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 120, -1));

        lblCuotasConMora.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCuotasConMora.setForeground(new java.awt.Color(255, 255, 255));
        lblCuotasConMora.setText("0");
        lblCuotasConMora.setToolTipText("");
        lblCuotasConMora.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblCuotasConMora, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 70, 20));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Total a pagar");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 100, 20));

        lblTotal.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(255, 255, 255));
        lblTotal.setText("0");
        lblTotal.setToolTipText("");
        lblTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 290, 70, 20));

        jPanel4.setBackground(new java.awt.Color(2, 119, 189));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos del Pago", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtFechaComprobante.setNothingAllowed(false);
        txtFechaComprobante.setEnabled(false);
        txtFechaComprobante.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        jPanel4.add(txtFechaComprobante, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 240, -1));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Tipo de Pago:");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 90, 20));

        lblFecha.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(255, 255, 255));
        lblFecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 90, 20));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Nombre y Apellido: ");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 140, 20));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Modo de Pago:");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 90, 20));

        jLabel14.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Numero de Referencia:");
        jPanel4.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 170, 20));

        cbxPago.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cbxPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Efectivo", "Debito", "Credito", "Transferencia", "Deposito" }));
        cbxPago.setEnabled(false);
        cbxPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPagoActionPerformed(evt);
            }
        });
        jPanel4.add(cbxPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, 120, 20));

        txtNombre.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtNombre.setEnabled(false);
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });
        jPanel4.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 280, -1));

        lblRegistro.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblRegistro.setForeground(new java.awt.Color(255, 255, 255));
        lblRegistro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRegistro.setToolTipText("");
        lblRegistro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel4.add(lblRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 120, 20));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Bs");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 20, 20));

        txtReferencia.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtReferencia.setEnabled(false);
        txtReferencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtReferenciaKeyTyped(evt);
            }
        });
        jPanel4.add(txtReferencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 240, -1));

        jLabel17.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Fecha:");
        jPanel4.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 50, 20));

        txtMonto.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtMonto.setToolTipText("");
        txtMonto.setEnabled(false);
        txtMonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMontoActionPerformed(evt);
            }
        });
        txtMonto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMontoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMontoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMontoKeyTyped(evt);
            }
        });
        jPanel4.add(txtMonto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 110, -1));

        jLabel18.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Fecha del Comprobante:");
        jPanel4.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 180, 20));

        jLabel19.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Banco Emisor:");
        jPanel4.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 110, 20));

        cbxBanco.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cbxBanco.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Banco de Venezuela S.A.C.A. Banco Universal", "Venezolano de Cr√©dito, S.A. Banco Universal", "Banco Mercantil, C.A S.A.C.A. Banco Universal", "Banco Provincial, S.A. Banco Universal", "Bancaribe C.A. Banco Universal", "Banco Exterior C.A. Banco Universal", "Banco Occidental de Descuento, Banco Universal C.A.", "Banco Caron√≠ C.A. Banco Universal", "Banesco Banco Universal S.A.C.A.", "Banco Sofitasa Banco Universal", "Banco Plaza Banco Universal", "Banco de la Gente Emprendedora C.A.", "Banco del Pueblo Soberano, C.A. Banco de Desarrollo", "BFC Banco Fondo Com√∫n C.A Banco Universal", "100% Banco, Banco Universal C.A.", "DelSur Banco Universal, C.A.", "Banco del Tesoro, C.A. Banco Universal", "Banco Agr√≠cola de Venezuela, C.A. Banco Universal", "Bancrecer, S.A. Banco Microfinanciero", "Mi Banco Banco Microfinanciero C.A.", "Banco Activo, C.A. Banco Universal", "Bancamiga Banco Microfinanciero C.A.", "Banco Internacional de Desarrollo, C.A. Banco Universal", "Banplus Banco Universal, C.A.", "Banco Bicentenario Banco Universal C.A.", "Banco Espirito Santo, S.A. Sucursal Venezuela B.U.", "Banco de la Fuerza Armada Nacional Bolivariana, B.U.", "Banco Nacional de Cr√©dito, C.A. Banco Universal", "Instituto Municipal de Cr√©dito Popular" }));
        cbxBanco.setEnabled(false);
        cbxBanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxBancoActionPerformed(evt);
            }
        });
        jPanel4.add(cbxBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, 310, -1));

        jLabel20.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Numero de Transaccion:");
        jPanel4.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 180, 20));

        txtTransaccion.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtTransaccion.setEnabled(false);
        txtTransaccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTransaccionKeyTyped(evt);
            }
        });
        jPanel4.add(txtTransaccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 240, -1));

        txtFechaEjecucion.setNothingAllowed(false);
        txtFechaEjecucion.setEnabled(false);
        txtFechaEjecucion.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        jPanel4.add(txtFechaEjecucion, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 240, -1));

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Fecha de Ejecucion:");
        jPanel4.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 150, 20));

        jLabel16.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Monto:");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 40, 20));

        buttonGroup1.add(rbnCuotas);
        rbnCuotas.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        rbnCuotas.setForeground(new java.awt.Color(255, 255, 255));
        rbnCuotas.setText("Cuotas");
        rbnCuotas.setEnabled(false);
        rbnCuotas.setOpaque(false);
        rbnCuotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnCuotasActionPerformed(evt);
            }
        });
        jPanel4.add(rbnCuotas, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, -1, -1));

        jLabel27.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Registro N¬∫:");
        jPanel4.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 90, 20));

        buttonGroup1.add(rbnInscripcion);
        rbnInscripcion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        rbnInscripcion.setForeground(new java.awt.Color(255, 255, 255));
        rbnInscripcion.setSelected(true);
        rbnInscripcion.setText("Inscripcion");
        rbnInscripcion.setEnabled(false);
        rbnInscripcion.setOpaque(false);
        rbnInscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnInscripcionActionPerformed(evt);
            }
        });
        jPanel4.add(rbnInscripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 110, -1));

        buttonGroup1.add(rbnSeguro);
        rbnSeguro.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        rbnSeguro.setForeground(new java.awt.Color(255, 255, 255));
        rbnSeguro.setText("Seguro");
        rbnSeguro.setEnabled(false);
        rbnSeguro.setOpaque(false);
        rbnSeguro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnSeguroActionPerformed(evt);
            }
        });
        jPanel4.add(rbnSeguro, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 80, -1));

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 30, 20));

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 140, 420, 290));

        lblUsuarioActvo1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblUsuarioActvo1.setForeground(new java.awt.Color(255, 255, 255));
        lblUsuarioActvo1.setText("Responsable:");
        lblUsuarioActvo1.setName("lblUsuarioActivo"); // NOI18N
        jPanel2.add(lblUsuarioActvo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 100, 30));

        jLabel21.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Cuotas a pagar");
        jPanel2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, -1));

        jLabel23.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Cuotas Pendientes");
        jPanel2.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 230, 110, -1));

        jLabel24.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Por Pagar");
        jPanel2.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 290, 110, -1));

        lblCuotasAPendientes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCuotasAPendientes.setForeground(new java.awt.Color(255, 255, 255));
        lblCuotasAPendientes.setText("0");
        lblCuotasAPendientes.setToolTipText("");
        lblCuotasAPendientes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblCuotasAPendientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, 90, 20));

        lblSaldoFavor.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSaldoFavor.setForeground(new java.awt.Color(255, 255, 255));
        lblSaldoFavor.setText("0");
        lblSaldoFavor.setToolTipText("");
        lblSaldoFavor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblSaldoFavor, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, 90, 20));

        lblTotalCancelado.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblTotalCancelado.setForeground(new java.awt.Color(255, 255, 255));
        lblTotalCancelado.setText("0");
        lblTotalCancelado.setToolTipText("");
        lblTotalCancelado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblTotalCancelado, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 450, 90, 20));

        btnBorrar.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/cleaner(1).png"))); // NOI18N
        btnBorrar.setText("Limpiar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        jPanel2.add(btnBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 450, 110, 30));

        jLabel29.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Pagado:");
        jPanel2.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 450, 50, 20));

        txtConcepto.setColumns(20);
        txtConcepto.setRows(5);
        txtConcepto.setEnabled(false);
        jScrollPane2.setViewportView(txtConcepto);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 400, 130));

        jLabel25.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Saldo a Favor");
        jPanel2.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 260, 110, -1));

        lblPorPagar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPorPagar.setForeground(new java.awt.Color(255, 255, 255));
        lblPorPagar.setText("0");
        lblPorPagar.setToolTipText("");
        lblPorPagar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblPorPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 290, 90, 20));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardar1ActionPerformed
        if (txtMonto.getText().isEmpty()) {
            coordinador.getLogica().mensajeAdvertencia("Ingrese un valor en el monto");
        } else {
            if (txtConcepto.getText().isEmpty()) {
            coordinador.getLogica().mensajeAdvertencia("Pulse el boton ubicado al lado del monto, para calcular el pago.");
            } else {
                if (rbnCuotas.isSelected()) {
                    if (validaciones()) {
                        pagar(obtenerDatos(), 3);
                    }
                } else if (rbnInscripcion.isSelected()) {
                    if (validacionesInscripcion()) {
                        calculoCuotas();
                        pagar(obtenerDatos(), 1);
                    }
                } else if (rbnSeguro.isSelected()) {
                    if (validacionesSeguro()) {
                        calculoCuotas();
                        pagar(obtenerDatos(), 2);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnGuardar1ActionPerformed

    private void btnAtras1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtras1ActionPerformed
        borrarCampos();
        this.dispose();
    }//GEN-LAST:event_btnAtras1ActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        if (!txtConsultar.getText().isEmpty()) {
            codigo = txtConsultar.getText().trim();
//            borrarCampos();
            consultarDatosAlumnos(codigo);
        } else {
//            coordinador.getLogica().mensajeError("Ingrese un codigo");
//            habilitarBotones(false);
//            borrarCampos();
            frmBusqueda.setLocationRelativeTo(this);
            frmBusqueda.setVisible(true);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void txtConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConsultarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConsultarActionPerformed

    private void txtPnombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPnombreKeyPressed

    }//GEN-LAST:event_txtPnombreKeyPressed

    private void txtPnombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPnombreKeyTyped
        validacionSoloLetras(evt, 15, txtPnombre.getText().length());
    }//GEN-LAST:event_txtPnombreKeyTyped

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoActionPerformed

    private void txtPnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPnombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPnombreActionPerformed

    private void cbxPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPagoActionPerformed
        if (cbxPago.getSelectedIndex() == 1 || cbxPago.getSelectedIndex() == 2) {
            txtTransaccion.setEnabled(true);
            txtFechaComprobante.setEnabled(true);
            txtFechaEjecucion.setEnabled(false);
            txtReferencia.setEnabled(false);
            txtReferencia.setText("");
            cbxBanco.setEnabled(false);
        } else if (cbxPago.getSelectedIndex() == 3 || cbxPago.getSelectedIndex() == 4) {
            txtTransaccion.setEnabled(false);
            txtTransaccion.setText("");
            txtFechaComprobante.setEnabled(false);
            txtFechaEjecucion.setEnabled(true);
            txtReferencia.setEnabled(true);
            cbxBanco.setEnabled(true);
        } else {
            txtTransaccion.setEnabled(false);
            txtFechaComprobante.setEnabled(false);
            txtFechaEjecucion.setEnabled(false);
            txtReferencia.setEnabled(false);
            cbxBanco.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxPagoActionPerformed

    private void cbxBancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxBancoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxBancoActionPerformed

    private void txtMontoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoKeyReleased
    if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
        if (!"".equals(txtMonto.getText())) {
            lblTotal.setText("" + Double.parseDouble(txtMonto.getText()));
            calculoCuotas();

        } else {
            lblTotal.setText("0");
            calculoCuotas();
        }
    }
    }//GEN-LAST:event_txtMontoKeyReleased

    private void txtMontoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoKeyTyped
    validacionSoloNumerosYPunto(evt, 15, txtMonto.getText().length());
    }//GEN-LAST:event_txtMontoKeyTyped

    private void txtMontoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoKeyPressed

    }//GEN-LAST:event_txtMontoKeyPressed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        borrarCampos();
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void txtMontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMontoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMontoActionPerformed

    private void rbnCuotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnCuotasActionPerformed
accionesCuotas();
    }//GEN-LAST:event_rbnCuotasActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        validacionSoloLetrasEspacio(evt, 15, txtNombre.getText().length());
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtTransaccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTransaccionKeyTyped
        validacionSoloNumeros(evt, 15, txtTransaccion.getText().length());
    }//GEN-LAST:event_txtTransaccionKeyTyped

    private void txtReferenciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReferenciaKeyTyped
        validacionSoloNumeros(evt, 15, txtReferencia.getText().length());
    }//GEN-LAST:event_txtReferenciaKeyTyped

    private void txtConsultarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultarKeyTyped
        validacionSoloNumerosYGuion(evt, 15, txtConsultar.getText().length());
    }//GEN-LAST:event_txtConsultarKeyTyped

    private void txtBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBusquedaActionPerformed

    private void txtBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyPressed

    }//GEN-LAST:event_txtBusquedaKeyPressed

    private void txtBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyReleased
        tblBusqueda.setModel(coordinador.consultarAlumnosTablaPago(txtBusqueda.getText().toUpperCase(), txtBusqueda.getText().toUpperCase()));
    }//GEN-LAST:event_txtBusquedaKeyReleased

    private void txtBusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyTyped

    }//GEN-LAST:event_txtBusquedaKeyTyped

    private void tblBusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBusquedaMouseClicked
        /*        borrarCampos();
        AlumnoVO alumnoVO = coordinador.consultarAlumno(tblBusqueda.getValueAt(tblBusqueda.getSelectedRow(), 0).toString());
        llenarCampos(alumnoVO);*/
    }//GEN-LAST:event_tblBusquedaMouseClicked

    private void tblBusquedaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBusquedaMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tblBusquedaMouseEntered

    private void btnBorrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrar1ActionPerformed
        txtBusqueda.setText("");
    }//GEN-LAST:event_btnBorrar1ActionPerformed

    private void btnSalir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalir1ActionPerformed
        txtBusqueda.setText("");
        //        desactivarCampos();
        frmBusqueda.dispose();
    }//GEN-LAST:event_btnSalir1ActionPerformed

    private void btnSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionActionPerformed
        borrarCampos();
        if (tblBusqueda.getSelectedRow() != -1) {
            AlumnoVO alumnoVO = coordinador.consultarAlumno(tblBusqueda.getValueAt(tblBusqueda.getSelectedRow(), 0).toString());
            consultarDatosAlumnos(alumnoVO.getId_alumno());
            frmBusqueda.dispose();
        } else {
            coordinador.getLogica().mensajeError("Por favor seleccione un registro");
        }
    }//GEN-LAST:event_btnSeleccionActionPerformed

    private void rbnInscripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnInscripcionActionPerformed
accionesInscripcion();
    }//GEN-LAST:event_rbnInscripcionActionPerformed

    private void rbnSeguroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnSeguroActionPerformed
         accionesSeguro();
    }//GEN-LAST:event_rbnSeguroActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (!"".equals(txtMonto.getText())) {
            lblTotal.setText("" + Double.parseDouble(txtMonto.getText()));
            calculoCuotas();

        } else {
            lblTotal.setText("0");
            calculoCuotas();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void setCoordinador(Coordinador coordinador) {
        this.coordinador = coordinador;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPago().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras1;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBorrar1;
    private javax.swing.JButton btnConsultar1;
    private javax.swing.JButton btnGuardar1;
    private javax.swing.JButton btnSalir1;
    private javax.swing.JButton btnSeleccion;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxBanco;
    private javax.swing.JComboBox<String> cbxPago;
    private javax.swing.JFrame frmBusqueda;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCuota;
    private javax.swing.JLabel lblCuotasAPagar;
    private javax.swing.JLabel lblCuotasAPendientes;
    private javax.swing.JLabel lblCuotasConMora;
    private javax.swing.JLabel lblDiaCobro;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblIva;
    private javax.swing.JLabel lblMatricula;
    private javax.swing.JLabel lblMora;
    private javax.swing.JLabel lblPorPagar;
    private javax.swing.JLabel lblRegistro;
    private javax.swing.JLabel lblSaldoFavor;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalCancelado;
    public javax.swing.JLabel lblUsuarioActvo;
    public javax.swing.JLabel lblUsuarioActvo1;
    private javax.swing.JLabel lblfoto;
    private javax.swing.JRadioButton rbnCuotas;
    private javax.swing.JRadioButton rbnInscripcion;
    private javax.swing.JRadioButton rbnSeguro;
    private javax.swing.JTable tblBusqueda;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextArea txtConcepto;
    private javax.swing.JTextField txtConsultar;
    private datechooser.beans.DateChooserCombo txtFechaComprobante;
    private datechooser.beans.DateChooserCombo txtFechaEjecucion;
    private javax.swing.JTextField txtMonto;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPnombre;
    private javax.swing.JTextField txtReferencia;
    private javax.swing.JTextField txtTransaccion;
    // End of variables declaration//GEN-END:variables

    private void validacionSoloLetras(KeyEvent evt, int maximo, int lim) {
        if (coordinador.validacionSoloLetras(evt.getKeyChar() + "")) {
            if (lim >= maximo) {
                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.consume();
            getToolkit().beep();
        }
    }

    private void validacionSoloLetrasEspacio(KeyEvent evt, int maximo, int lim) {
        if (coordinador.validacionSoloLetrasEspacio(evt.getKeyChar() + "")) {
            if (lim >= maximo) {
                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.consume();
            getToolkit().beep();
        }
    }

    private void validacionLimite(KeyEvent evt, int maximo, int lim) {
        if (lim >= maximo) {
            evt.consume();
            getToolkit().beep();
        }
    }

    private void validacionTelefono(KeyEvent evt, int maximo, int lim) {
        if (coordinador.validacionLimiteSoloNumerosYGuion(evt.getKeyChar() + "")) {
            if (lim >= maximo) {
                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.consume();
            getToolkit().beep();
        }
    }

    private void validacionSoloNumeros(KeyEvent evt, int maximo, int lim) {
        if (coordinador.validacionLimiteSoloNumeros(evt.getKeyChar() + "")) {
            if (lim >= maximo) {
                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.consume();
            getToolkit().beep();
        }
    }

    private void validacionSoloNumerosYGuion(KeyEvent evt, int maximo, int lim) {
        if (coordinador.validacionLimiteSoloNumerosYGuion(evt.getKeyChar() + "")) {
            if (lim >= maximo) {
                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.consume();
            getToolkit().beep();
        }
    }

    private void llenarCampos(String id_alumno) {
        //llenos los text
        VariablesVO variablesVO = coordinador.getVariablesDAO().consultarVariables();
        lblCuota.setText("" + variablesVO.getPrecio_cuota());
        lblMora.setText("" + variablesVO.getPrecio_mora());
        lblDiaCobro.setText("" + variablesVO.getDias_mora());
        lblIva.setText("" + variablesVO.getIva());
        double valorMatricula = variablesVO.getPrecio_cuota() * 12;
        lblMatricula.setText(valorMatricula + "");

        //asigno valores de fecha y registro
        lblRegistro.setText(String.valueOf(coordinador.getRegistroPagoDAO().NumeroAleatorio()));
        lblFecha.setText(coordinador.getLogica().getFechaFormateada());

        //llenos cuotas pendientes
        lblCuotasAPendientes.setText(coordinador.getPagoDAO().getCuotasPendientes(id_alumno) + "");
    }

    private void calculoCuotas() {
        if (rbnCuotas.isSelected()) {
            logicaPago(txtCodigo.getText());
        }else if (rbnInscripcion.isSelected()) {
            id_pago = coordinador.getPagoDAO().consultarPago(txtCodigo.getText()).getId_pago();
        }else if (rbnSeguro.isSelected()) {
            id_pago = coordinador.getPagoDAO().consultarPago(txtCodigo.getText()).getId_pago();
        }    
    }

    private void logicaPago(String id_alumno) {

        PagoVO pagoVo = coordinador.getPagoDAO().consultarPago(id_alumno);
        double saldo;
        int cuotasPendientes = coordinador.getPagoDAO().getCuotasPendientes(id_alumno);
        VariablesVO variablesDAO = coordinador.getVariablesDAO().consultarVariables();
        //traigo el total pago de la bd
        lblTotalCancelado.setText((pagoVo.getPagado() + totalPagado) + "");
        lblSaldoFavor.setText((pagoVo.getSaldo()) + "");
        lblPorPagar.setText((coordinador.getPagoDAO().getPorPagar(id_alumno) - pagoVo.getSaldo()) + "");
        lblTotalCancelado.setText(pagoVo.getPagado() + "");
        int cuotasPagadas = 0;
        double abono = 0;
        int i = 0;
        double mora = 0;
        int cuotasMora = 0;
        double valorCuota = Double.parseDouble(lblCuota.getText());
        double valorMora = Double.parseDouble(lblMora.getText());
        int mesCobro = variablesDAO.getMes_cobro() - 1;

        //calculo las cuotas a pagar con el monto ingresado
        if (txtMonto.getText().equals("") || txtMonto.getText().equals("0")) {
            saldo = 0D;
            txtConcepto.setText("");
            lblCuotasAPagar.setText("0");
            lblCuotasAPendientes.setText(cuotasPendientes + "");
        } else {
            saldo = Double.parseDouble(txtMonto.getText().trim());
        }

        if (saldo > 0) {
            saldo += pagoVo.getSaldo();
            txtConcepto.setText("");
            for (i = mesCobro; i < pagoVo.getPago().length; i++) {
                //si el 0 omito
                if (pagoVo.getPago()[i] == 0) {
                    continue;
                }

                //compruebo si esta en mora
                if (isCuotaMora(lblDiaCobro.getText(), String.valueOf(i + 1))) {
                    mora =  valorCuota * ( valorMora / 100);
                    cuotasMora++;
                } else {
                    mora = 0;
                }
                //si es mayor resto el saldo y pongo el mes como pagado
                if (saldo >= pagoVo.getPago()[i] + mora) {
                    //compruebo si esta vacio para no insertar salto de linea
                    if (txtConcepto.getText().isEmpty()) {
                        txtConcepto.setText(txtConcepto.getText() + "" + "Pago mes " + obtenerMes(i + 1) + " Valor: " + (pagoVo.getPago()[i]));
                    } else {
                        txtConcepto.setText(txtConcepto.getText() + "" + "\nPago mes " + obtenerMes(i + 1) + " Valor: " + (pagoVo.getPago()[i]));
                    }
                    if (mora != 0) {
                        //compruebo si esta vacio para no insertar salto de linea
                        if (txtConcepto.getText().isEmpty()) {
                            txtConcepto.setText(txtConcepto.getText() + "" + "Pago mora mes " + obtenerMes(i + 1) + " Valor: " + mora);
                        } else {
                            txtConcepto.setText(txtConcepto.getText() + "" + "\nPago mora mes " + obtenerMes(i + 1) + " Valor: " + mora);
                        }
                    }

                    saldo -= pagoVo.getPago()[i] + mora;
                    pagoVo.getPago()[i] = 0D;
                    cuotasPagadas++;
//                    txtConcepto.setText(txtConcepto.getText()+ "" +"\nCuotas Pagadas: " + cuotasPagadas);
                } else {
                    //resto saldo al mes siquiente
                    pagoVo.getPago()[i] -= saldo;
                    abono = saldo;
                    saldo = 0;
                    //compruebo si esta vacio para no insertar salto de linea
                    if (txtConcepto.getText().isEmpty()) {
                        txtConcepto.setText(txtConcepto.getText() + "" + "Abono en mes: " + obtenerMes(i + 1) + " Valor: " + abono);
                    } else {
                        txtConcepto.setText(txtConcepto.getText() + "" + "\nAbono en mes: " + obtenerMes(i + 1) + " Valor: " + abono);
                    }
//                    txtConcepto.setText(txtConcepto.getText()+ "" +"\nAbono al mes " + (i+1) + ".");
//                    txtConcepto.setText(txtConcepto.getText()+ "" +"\nCuotas Pagadas: " + cuotasPagadas);
                }
                if (saldo == 0) {
                    break;
                }

            }
            //compruebo mes despues que llego al final
            if (i == 12 && mesCobro != 0) {
                for (int j = 0; j < mesCobro; j++) {
                    //txtConcepto.setText("");
                    //si el 0 omito
                    if (pagoVo.getPago()[j] == 0) {
                        continue;
                    }
                    //compruebo si esta en mora
                    if (isCuotaMora(lblDiaCobro.getText(), String.valueOf(j + 1))) {
                        mora =  valorCuota * ( valorMora / 100);
                        cuotasMora++;
                    } else {
                        mora = 0;
                    }
                    //si es mayor resto el saldo y pongo el mes como pagado
                    if (saldo >= pagoVo.getPago()[j] + mora) {
                        //compruebo si esta vacio para no insertar salto de linea
                        if (txtConcepto.getText().isEmpty()) {
                            txtConcepto.setText(txtConcepto.getText() + "" + "Pago mes " + obtenerMes(j + 1) + " Valor: " + (pagoVo.getPago()[j]));
                        } else {
                            txtConcepto.setText(txtConcepto.getText() + "" + "\nPago mes " + obtenerMes(j + 1) + " Valor: " + (pagoVo.getPago()[j]));
                        }
                        //compruebo si esta vacio para no insertar salto de linea
                        if (mora != 0) {
                            if (txtConcepto.getText().isEmpty()) {
                                txtConcepto.setText(txtConcepto.getText() + "" + "Pago mora mes " + obtenerMes(j + 1) + " Valor: " + mora);
                            } else {
                                txtConcepto.setText(txtConcepto.getText() + "" + "\nPago mora mes " + obtenerMes(j + 1) + " Valor: " + mora);
                            }
                        }
                        
                        saldo -= pagoVo.getPago()[j] + mora;
                        pagoVo.getPago()[j] = 0D;
                        cuotasPagadas++;
//                             txtConcepto.setText(txtConcepto.getText()+ "" +"\nCuotas Pagadas = " + cuotasPagadas);
                    } else {
                        //resto saldo al mes siquiente
                        pagoVo.getPago()[j] -= saldo;
                        abono = saldo;
                        saldo = 0;
//                            txtConcepto.setText(txtConcepto.getText()+ "" +"\nAbono al mes " + (j+1) + ".");
//                            txtConcepto.setText(txtConcepto.getText()+ "" +"\nCuotas Pagadas = " + cuotasPagadas);
                        //compruebo si esta vacio para no insertar salto de linea
                        if (txtConcepto.getText().isEmpty()) {
                            txtConcepto.setText(txtConcepto.getText() + "" + "Abono en mes: " + obtenerMes(j + 1) + " Valor: " + abono);
                        } else {
                            txtConcepto.setText(txtConcepto.getText() + "" + "\nAbono en mes: " + obtenerMes(j + 1) + " Valor: " + abono);
                        }

                    }
                    if (saldo == 0) {
                        break;
                    }
                }
            }

            //escribo nuevos valores en text
//            lblSaldoFavor.setText(saldo+"");
            lblCuotasAPagar.setText(cuotasPagadas + "");
            lblCuotasConMora.setText(cuotasMora + "");
            //llenos cuotas pendientes
            lblCuotasAPendientes.setText(cuotasPendientes - cuotasPagadas + "");
            if (saldo > 0 && Integer.parseInt(lblCuotasAPendientes.getText()) == 0) {
                System.out.println("Saldo a Favor: " + saldo);
                lblSaldoFavor.setText(saldo + "");
                //compruebo si esta vacio para no insertar salto de linea
                if (txtConcepto.getText().isEmpty()) {
                    txtConcepto.setText(txtConcepto.getText() + "" + "Saldo a Favor = " + saldo);
                } else {
                    txtConcepto.setText(txtConcepto.getText() + "\n" + "Saldo a Favor = " + saldo);
                }
            }

            pvo.setId_alumno(id_alumno);
            pvo.setId_pago(pagoVo.getId_pago());
            pvo.setPago(pagoVo.getPago());
            pvo.setPagado(Double.parseDouble(lblTotalCancelado.getText()) + Double.parseDouble(lblTotal.getText()));
            pvo.setPeriodo(pagoVo.getPeriodo());
            pvo.setSaldo(Double.parseDouble(lblSaldoFavor.getText()));
            pvo.setId_pago(pagoVo.getId_pago());
            id_pago = pagoVo.getId_pago();
//            System.out.println(pvo);
        }
        
    }

    private void habilitarBotones(boolean b) {
        txtNombre.setEnabled(b);
        txtMonto.setEnabled(b);
        cbxPago.setEnabled(b);
        rbnCuotas.setEnabled(b);
        rbnInscripcion.setEnabled(b);
        rbnSeguro.setEnabled(b);
    }

    private void validacionSoloNumerosYPunto(KeyEvent evt, int maximo, int lim) {
        if (coordinador.validacionSoloNumerosYPunto(evt.getKeyChar() + "")) {
            if (lim >= maximo) {
                evt.consume();
                getToolkit().beep();
            }
        } else {
            evt.consume();
            getToolkit().beep();
        }
    }

    private boolean isCuotaMora(String dia, String mes) {
        SimpleDateFormat ft = new SimpleDateFormat("dd-MM-yyyy");
        /**
         * recorro vector para saber que mes pertenecen al periodo anterior
         * y que meses al periodo nuevo
         */
        String fechaOrigen = obtenerFecha(dia, mes);

        try {
            Date fecha = ft.parse(fechaOrigen);
            Date fecha2 = ft.parse(coordinador.getFechaFormateada());
            if (fecha2.compareTo(fecha) > 0) {
                return true;
            } else {
                return false;
            }
        } catch (ParseException ex) {
            Logger.getLogger(frmPago.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
    
    private String obtenerFecha(String dia, String mes) {
        int mesCobroI = coordinador.getVariablesDAO().consultarVariables().getMes_cobro();
        int diaCobroI = coordinador.getVariablesDAO().consultarVariables().getDias_mora();
        int diaI = Integer.parseInt(dia);
        int mesI = Integer.parseInt(mes);
        String periodo = coordinador.consultarVariables().getPeriodo_actual();
        String anioViejo = periodo.substring(0,4);
        String anionuevo = periodo.substring(5);
        
        if (diaI > 0 && diaI < 10) {
            dia = "0"+dia;
        }
        if (mesI > 0 && mesI < 10) {
            mes = "0"+mes;
        }
        //reasigno
        diaI = Integer.parseInt(dia);
        mesI = Integer.parseInt(mes);
        
        if (mesI < mesCobroI) {
            return dia + "-" + mes + "-" + anionuevo;
        }else{
            return dia + "-" + mes + "-" + anioViejo;
        }
    }

//    private void registrarComprobante(RegistroPagoVO registroPagoVO) {
//        String registrarRegistroPago = coordinador.registrarRegistroPago(registroPagoVO);
//        if (registrarRegistroPago.equals("INGRESADO CON EXITO")) {
//            coordinador.getLogica().mensajeCorrecto("Pago registrado con exito");
//            borrarCampos();
//        } else {
//            coordinador.getLogica().mensajeError("Problemas al registrar pago 2");
//        }
//    }

    private RegistroPagoVO obtenerDatos() {
        VO.RegistroPagoVO registroPagoVO = new VO.RegistroPagoVO();
        String fecha = lblFecha.getText();
        fecha = fecha.replace('/', '-');
        String fecha2 = txtFechaComprobante.getText();
        fecha2 = fecha2.replace('/', '-');
        String fecha3 = txtFechaEjecucion.getText();
        fecha3 = fecha3.replace('/', '-');
        registroPagoVO.setNumero_registro(lblRegistro.getText());
        registroPagoVO.setId_pago(id_pago);
        registroPagoVO.setFecha(fecha);
        registroPagoVO.setDepositante(txtNombre.getText());
        registroPagoVO.setMonto(Double.parseDouble(txtMonto.getText()));
        registroPagoVO.setTipo_pago(cbxPago.getSelectedItem().toString());
        registroPagoVO.setConcepto(txtConcepto.getText());
        if (txtTransaccion.isEnabled()) {
            registroPagoVO.setNumero_transaccion(txtTransaccion.getText());
        }

        if (txtFechaComprobante.isEnabled()) {
            registroPagoVO.setFecha_comprobante(fecha2);
        }

        if (cbxBanco.isEnabled()) {
            registroPagoVO.setBanco_emisor(cbxBanco.getSelectedItem().toString());
        }

        if (txtReferencia.isEnabled()) {
            registroPagoVO.setNumero_referencia(txtReferencia.getText());
        }

        if (txtFechaEjecucion.isEnabled()) {
            registroPagoVO.setFecha_ejecucion(fecha3);
        }
        return registroPagoVO;
    }

    private void borrarCampos() {
        txtConsultar.setText("");
        txtConsultar.setFocusable(true);
        lblCuota.setText("0");
        lblMora.setText("0");
        lblIva.setText("0");
        lblDiaCobro.setText("0");
        lblDiaCobro.setText("0");
        txtCodigo.setText("");
        lblMatricula.setText("");
        lblPorPagar.setText("");
        txtConcepto.setText("");
        txtPnombre.setText("");
        ajustar(lblfoto, ICON_NO_PHOTO);
        ajustar(lblfoto, ICON_NO_PHOTO);

        lblCuotasAPagar.setText("0");
        lblCuotasAPendientes.setText("0");
        lblCuotasConMora.setText("0");
        lblSaldoFavor.setText("0");
        lblTotal.setText("0");
//        lblTotalPagado.setText("0");
//        lblSaldoPendiente.setText("0");
        lblTotalCancelado.setText("0");

        rbnCuotas.setSelected(true);
        rbnInscripcion.setSelected(false);
        rbnSeguro.setEnabled(false);
        rbnCuotas.setEnabled(false);
        rbnSeguro.setEnabled(false);
        rbnInscripcion.setEnabled(false);
        lblRegistro.setText("");
        lblFecha.setText("");
        txtNombre.setText("");
        txtNombre.setEnabled(false);
        txtMonto.setEnabled(false);
        txtMonto.setText("");
        cbxPago.setSelectedIndex(0);
        cbxPago.setEnabled(false);
        txtTransaccion.setEnabled(false);
        txtTransaccion.setText("");
        txtFechaComprobante.setEnabled(false);
        cbxBanco.setSelectedIndex(0);
        cbxBanco.setEnabled(false);
        txtReferencia.setEnabled(false);
        txtReferencia.setText("");
        txtFechaEjecucion.setEnabled(false);

        totalPagado = 0;
        total_a_pagar = 0;
//        total_pagadoBD=0;
//         cuotas_a_pagar = 0;
//        precioCuota = 0;
//        mora = 0;
//        iva = 0;
        totalPagado = 0;
//        cuotasMora = 0;
    }

//    private void cuotasRestantes(PagoVO consultarPago) {
//        //compruebo cuantas cuotas faltan
//        for (int i = 0; i < consultarPago.getCuotas().length; i++) {
//            if ("true".equals(consultarPago.getCuotas()[i])) {
//                contadorCuotasPagadas++;
//            } else {
//                contadorCuotasPendientes++;
//            }
//        }
//        lblCuotasAPendientes.setText("" + contadorCuotasPendientes);
//    }
//
    private void consultarPago(String id_alumno) {
        /**
         * pagos consulta
         */
        PagoVO consultarPago = coordinador.getPagoDAO().consultarPago(id_alumno);
        VariablesVO variablesVO = coordinador.getVariablesDAO().consultarVariables();
        //consulto algun registro de pago existe , si no creo uno nuevo para el alumno
        if (consultarPago.getPago() != null) {
            habilitarBotones(true);
        } else {
            Double[] pago = new Double[12];
            for (int i = 0; i < pago.length; i++) {
                pago[i] = variablesVO.getPrecio_cuota();
            }
            consultarPago.setId_alumno(id_alumno);
            consultarPago.setPagado(0D);
            consultarPago.setPago(pago);
            consultarPago.setPeriodo(variablesVO.getPeriodo_actual());
            consultarPago.setSaldo(0D);
            //inserto en bd nuevo registro
            System.out.println(coordinador.getPagoDAO().registrarPago(consultarPago));
            habilitarBotones(true);
        }
        //lblTotal.setText("0");
        calculoCuotas();
        /**
         *
         */
    }

    private void consultarDatosAlumnos(String id_alumno) {
        AlumnoVO alumnoVO = coordinador.consultarAlumno(id_alumno);
        if (alumnoVO.getPrimer_nombre() != null) {
            //datos del alumno
            txtPnombre.setText(alumnoVO.getPrimer_nombre() + " " + alumnoVO.getPrimer_apellido());
            txtCodigo.setText(String.valueOf(alumnoVO.getId_alumno()));
            if (alumnoVO.getFoto() == null) {
                ajustar(lblfoto, ICON_NO_PHOTO);
            } else {
                ajustar(lblfoto, alumnoVO.getFoto());
            }

            //consulto precios para llenar text
            llenarCampos(id_alumno);

            //consulto pago si existe
            consultarPago(id_alumno);
            
            //compruebo si pago inscripcion y seguro
            if (coordinador.isInscrito(id_alumno, "INSCRIPCION")) {
                if (coordinador.isInscrito(id_alumno, "SEGURO")) {
                    //activo cuotas
                    accionesCuotas();
                       //si no hay cuotas pendientes verifico si hay saldo pendiente
                        if (verificarSolvencia(id_alumno)) {
                            coordinador.getLogica().mensajeAdvertencia("El alumno " + txtPnombre.getText() + " se encuentra solvente.");
                            //consulto las notas para saber si tiene las notas completas y cambiar estatus
                            if (coordinador.getNotaDAO().consultarNota(codigo).getLapso() == 3) {
                                coordinador.actualizarEstatusAlumno(id_alumno,true);
                            }
                            habilitarBotones(false);
                            borrarCampos();
                        }
                } else {
                    //no se a inscrito solo habilito seguro
                    accionesSeguro();
                }
            } else {
                //no se a inscrito solo habilito inscripcion
                accionesInscripcion();
            }


        } else {
            frmBusqueda.setLocationRelativeTo(this);
            frmBusqueda.setVisible(true);
//            coordinador.getLogica().mensajeError("Codigo: " + txtConsultar.getText() + " no existe en la Base de Datos");
//            borrarCampos();
//            habilitarBotones(false);
        }
    }

    private boolean verificarSolvencia(String id_alumno) {
        PagoVO pagoVO = coordinador.consultarPago(id_alumno);
        int contadorCuotas = 0;
        if (pagoVO.getPago() != null) {
            for (int i = 0; i < pagoVO.getPago().length; i++) {
                if (pagoVO.getPago()[i] == 0) {
                    contadorCuotas++;
                }
            }
            if (contadorCuotas == 12) {
                return true;
            }
        }
        return false;
    }

    private boolean validaciones() {
        if (Double.parseDouble(txtMonto.getText()) > 0) {
            if (!txtNombre.getText().isEmpty()) {
                if (cbxPago.getSelectedIndex() == 1 || cbxPago.getSelectedIndex() == 2) {
                    if (!txtTransaccion.getText().isEmpty()) {
                        if (Double.parseDouble(lblCuotasAPendientes.getText()) >= 0 && Double.parseDouble(lblCuotasAPagar.getText()) > 0) {
                            return true;
                        } else {
                            coordinador.getLogica().mensajeAdvertencia("Por Favor seleccione las cuotas a cancelar");
                            return false;
                        }
                    } else {
                        coordinador.getLogica().mensajeAdvertencia("Numero de transaccion no puede estar en blanco");
                        return false;
                    }
                } else if (cbxPago.getSelectedIndex() == 3 || cbxPago.getSelectedIndex() == 4) {
                    if (!txtReferencia.getText().isEmpty()) {
                        if (Double.parseDouble(lblCuotasAPendientes.getText()) >= 0 && Double.parseDouble(lblCuotasAPagar.getText()) > 0) {
                            return true;
                        } else {
                            coordinador.getLogica().mensajeAdvertencia("Por Favor seleccione las cuotas a cancelar");
                            return false;
                        }
                    } else {
                        coordinador.getLogica().mensajeAdvertencia("Numero de Referencia no puede estar en blanco");
                        return false;
                    }
                } else {
                    if (Double.parseDouble(lblCuotasAPendientes.getText()) >= 0 && Double.parseDouble(lblCuotasAPagar.getText()) > 0) {
                        return true;
                    } else {
                        if (Double.parseDouble(lblCuotasAPendientes.getText()) == 0 && Double.parseDouble(lblCuotasAPagar.getText()) == 0) {
                            return true;
                        } else {
                            coordinador.getLogica().mensajeAdvertencia("Por Favor seleccione las cuotas a cancelar");
                            return false;
                        }
                    }
                }
            } else {
                coordinador.getLogica().mensajeAdvertencia("El nombre del depositante no puede estar vacio");
                return false;
            }
        } else {
            coordinador.getLogica().mensajeAdvertencia("Ingrese un Monto");
            return false;
        }
    }
    
    private boolean validacionesInscripcion() {
        if (Double.parseDouble(txtMonto.getText()) == 0) {
                coordinador.getLogica().mensajeAdvertencia("Ingrese un Monto");
            return false;
        }
        if (txtNombre.getText().isEmpty()) {
            coordinador.getLogica().mensajeAdvertencia("El Nombre del depositante no puede estar vacio");
            return false;
        }

        if (cbxPago.getSelectedIndex() == 1 || cbxPago.getSelectedIndex() == 2) {
            if (txtTransaccion.getText().isEmpty()) {
                coordinador.getLogica().mensajeAdvertencia("Numero de transaccion no puede estar en blanco");
                return false;
            }

        } else if (cbxPago.getSelectedIndex() == 3 || cbxPago.getSelectedIndex() == 4) {

            if (txtReferencia.getText().isEmpty()) {
                coordinador.getLogica().mensajeAdvertencia("Numero de Referencia no puede estar en blanco");
                return false;
            }
        } 
        if (Double.parseDouble(txtMonto.getText()) != Double.parseDouble(lblPorPagar.getText())) {
                coordinador.getLogica().mensajeAdvertencia("El monto a cancelar debe ser igual al monto por pagar.");
            return false;
        }
        return true;
    }
    
    private boolean validacionesSeguro() {
        if (Double.parseDouble(txtMonto.getText()) == 0) {
                coordinador.getLogica().mensajeAdvertencia("Ingrese un Monto");
            return false;
        }
        if (txtNombre.getText().isEmpty()) {
            coordinador.getLogica().mensajeAdvertencia("El Nombre del depositante no puede estar vacio");
            return false;
        }

        if (cbxPago.getSelectedIndex() == 1 || cbxPago.getSelectedIndex() == 2) {
            if (txtTransaccion.getText().isEmpty()) {
                coordinador.getLogica().mensajeAdvertencia("Numero de transaccion no puede estar en blanco");
                return false;
            }

        } else if (cbxPago.getSelectedIndex() == 3 || cbxPago.getSelectedIndex() == 4) {

            if (txtReferencia.getText().isEmpty()) {
                coordinador.getLogica().mensajeAdvertencia("Numero de Referencia no puede estar en blanco");
                return false;
            }
        } 
        if (Double.parseDouble(txtMonto.getText()) != Double.parseDouble(lblPorPagar.getText())) {
                coordinador.getLogica().mensajeAdvertencia("El monto a cancelar debe ser igual al monto por pagar.");
            return false;
        }
        return true;
    }

    private void verificarAjuste() {
        double ajuste = Double.parseDouble(lblMatricula.getText()) - Double.parseDouble(lblTotalCancelado.getText());
//            saldo_pendienteBD = ajuste;
        if (ajuste > 0) {
            if (Double.parseDouble(lblSaldoFavor.getText()) == 0) {
                lblSaldoFavor.setText(ajuste + "");
                lblTotal.setText(ajuste + "");
            } else {
                lblSaldoFavor.setText("" + (ajuste + Double.parseDouble(lblSaldoFavor.getText())));
                lblTotal.setText("" + (ajuste + Double.parseDouble(lblSaldoFavor.getText())));
            }
        } else {
            if (Double.parseDouble(lblSaldoFavor.getText()) <= 0) {
                coordinador.getLogica().mensajeCorrecto("El Alumno: " + txtPnombre.getText() + " se encuentra solvente en el periodo " + coordinador.getVariablesDAO().consultarVariables().getPeriodo_actual() + " \nCon Saldo a Favor de: " + saldo_favorBD);
                borrarCampos();
            }
        }
    }

    private void pagar(RegistroPagoVO obtenerDatos, int tipo) {
        String res = "";
        switch (tipo) {
            case 3:
                res = coordinador.getPagoDAO().actualizarPago(pvo, pvo.getId_alumno());
                if (res.equals("DATOS ACTUALIZADOS")) {
                    res = coordinador.getRegistroPagoDAO().registrarRegistroPago(obtenerDatos);
                    if (res.equals("INGRESADO CON EXITO")) {
                        coordinador.getLogica().mensajeCorrecto("Pago Registrado con Exito");
                        //si no hay cuotas pendientes verifico si hay saldo pendiente
                        if (verificarSolvencia(pvo.getId_alumno())) {
                            coordinador.getLogica().mensajeAdvertencia("El alumno " + txtPnombre.getText() + " se encuentra solvente.");
                            //consulto las notas para saber si tiene las notas completas y cambiar estatus
                            if (coordinador.getNotaDAO().consultarNota(codigo).getLapso() == 3) {
                                coordinador.actualizarEstatusAlumno(pvo.getId_alumno(),true);
                            }
//                            habilitarBotones(false);
//                            borrarCampos();
                        }
                        borrarCampos();
                    } else {
                        coordinador.getLogica().mensajeError("Error al ingresar registro de pago");
                    }
                } else {
                    coordinador.getLogica().mensajeError("Error al actualizar pago");
                }
                break;
            case 2:
                res = coordinador.getRegistroPagoDAO().registrarRegistroPago(obtenerDatos);
                if (res.equals("INGRESADO CON EXITO")) {
                    coordinador.getLogica().mensajeCorrecto("Pago Registrado con Exito");
                    borrarCampos();
                } else {
                    coordinador.getLogica().mensajeError("Error al ingresar registro de pago");
                }
            break;
            case 1:
                res = coordinador.getRegistroPagoDAO().registrarRegistroPago(obtenerDatos);
                if (res.equals("INGRESADO CON EXITO")) {
                    coordinador.getLogica().mensajeCorrecto("Pago Registrado con Exito");
                    borrarCampos();
                } else {
                    coordinador.getLogica().mensajeError("Error al ingresar registro de pago");
                }
            break;
            default:
                throw new AssertionError();
        }
    }

    private void accionesSeguro() {
        rbnSeguro.setSelected(true);
        rbnInscripcion.setEnabled(false);
        rbnCuotas.setEnabled(false);
               lblRegistro.setText(String.valueOf(coordinador.getRegistroPagoDAO().NumeroAleatorio()));
        lblFecha.setText(coordinador.getFechaFormateada());
        txtNombre.setText("");
        txtNombre.setEnabled(true);
        txtMonto.setEnabled(true);
        txtMonto.setText("0");
        cbxPago.setSelectedIndex(0);
        cbxPago.setEnabled(true);
        txtTransaccion.setEnabled(false);
        txtTransaccion.setText("");
        txtFechaComprobante.setEnabled(false);
        cbxBanco.setSelectedIndex(0);
        cbxBanco.setEnabled(false);
        txtReferencia.setEnabled(false);
        txtReferencia.setText("");
        txtFechaEjecucion.setEnabled(false);
        lblCuotasAPagar.setText("0");
        lblCuotasAPendientes.setText("0");
        lblSaldoFavor.setText("0");
        lblPorPagar.setText(""+coordinador.consultarVariables().getSeguro());
        txtConcepto.setText("PAGO SEGURO MEDICO");
    }

    private void accionesInscripcion() {
        lblRegistro.setText(String.valueOf(coordinador.getRegistroPagoDAO().NumeroAleatorio()));
        rbnInscripcion.setSelected(true);
        rbnSeguro.setEnabled(false);
        rbnCuotas.setEnabled(false);
        lblFecha.setText(coordinador.getFechaFormateada());
        txtNombre.setText("");
        txtNombre.setEnabled(true);
        txtMonto.setEnabled(true);
        txtMonto.setText("0");
        cbxPago.setSelectedIndex(0);
        cbxPago.setEnabled(true);
        txtTransaccion.setEnabled(false);
        txtTransaccion.setText("");
        txtFechaComprobante.setEnabled(false);
        cbxBanco.setSelectedIndex(0);
        cbxBanco.setEnabled(false);
        txtReferencia.setEnabled(false);
        txtReferencia.setText("");
        txtFechaEjecucion.setEnabled(false);
        lblCuotasAPagar.setText("0");
        lblCuotasAPendientes.setText("0");
        lblSaldoFavor.setText("0");
        lblPorPagar.setText(""+coordinador.consultarVariables().getPrecio_inscripcion());
       txtConcepto.setText("PAGO INSCRIPCION");
    }

    private void accionesCuotas() {
        rbnCuotas.setSelected(true);
        rbnSeguro.setEnabled(false);
        rbnInscripcion.setEnabled(false);
        lblRegistro.setText(String.valueOf(coordinador.getRegistroPagoDAO().NumeroAleatorio()));
        lblFecha.setText(coordinador.getFechaFormateada());
        txtNombre.setText("");
        txtNombre.setEnabled(true);
        txtMonto.setEnabled(true);
        txtMonto.setText("0");
        cbxPago.setSelectedIndex(0);
        cbxPago.setEnabled(true);
        txtTransaccion.setEnabled(false);
        txtTransaccion.setText("");
        txtFechaComprobante.setEnabled(false);
        cbxBanco.setSelectedIndex(0);
        cbxBanco.setEnabled(false);
        txtReferencia.setEnabled(false);
        txtReferencia.setText("");
        txtFechaEjecucion.setEnabled(false);
//        lblPorPagar.setText("0");
        txtConcepto.setText("");
    }

    private String obtenerMes(int i) {
        switch (i) {
            case 1:
            return "Enero";
            case 2:
            return "Febrero";
            case 3:
            return "Marzo";
            case 4:
            return "Abril";
            case 5:
            return "Mayo";
            case 6:
            return "Junio";
            case 7:
            return "Julio";
            case 8:
            return "Agosto";
            case 9:
            return "Septiembre";
            case 10:
            return "Octubre";
            case 11:
            return "Noviembre";
            case 12:
            return "Diciembre";
            default:
                return  i+"";
        }
    }

}
